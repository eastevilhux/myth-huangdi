apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion

    defaultConfig {
        //注意这里只是设置了appId的前缀 在buildTypes里面有设置后缀
        applicationId APPLICATION_ID
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName

        // 增加一个编译版本的时间
        buildConfigField "long", "RELEASE_TIME", System.currentTimeMillis() + "L"

        // 配置 含有的版本类型
        buildConfigField "int", "VERSION_DEV", VERSION_DEV
        buildConfigField "int", "VERSION_SIT", VERSION_SIT
        buildConfigField "int", "VERSION_UAT", VERSION_UAT
        buildConfigField "int", "VERSION_RELEASE", VERSION_RELEASE
        buildConfigField "int", "VERSION_PERSONAL",VERSION_PERSONAL
        // 配置默认版本-为开发版本
        buildConfigField "int", "VERSION_TYPE", VERSION_DEV
        buildConfigField "String", "VERSION_DESCRIPTION", "\"release\""

        // NDK 加载lib的文件夹,生成Apk32位和64位
        ndk {
            abiFilters 'armeabi', 'armeabi-v7a', 'arm64-v8a'
        }
    }

    packagingOptions {
        exclude 'META-INF/lib-uikit_release.kotlin_module'
    }

    //签名
    /*signingConfigs{
        box{
            storeFile file("/keystore/box.jks")
            storePassword 'slbox123'
            keyAlias 'box'
            keyPassword 'slbox123'
        }
    }*/

    flavorDimensions "normal"

    /*productFlavors{
        box{
            applicationId "com.star.light.box"
            signingConfig signingConfigs.box
            versionCode 1
            versionName "0.0.1"

            dimension 'normal'
        }
    }*/

    buildTypes {
        debug {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 设置那个版本
            buildConfigField "int", "VERSION_TYPE", VERSION_DEV
            buildConfigField "String", "VERSION_DESCRIPTION", "\"开发版本\""
        }

        company {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 设置那个版本
            buildConfigField "int", "VERSION_TYPE", VERSION_COMPANY
            buildConfigField "String", "VERSION_DESCRIPTION", "\"开发版本\""
        }

        personal {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 设置那个版本
            buildConfigField "int", "VERSION_TYPE", VERSION_PERSONAL
            buildConfigField "String", "VERSION_DESCRIPTION", "\"开发版本\""
        }

        sit {
            debuggable true
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 设置那个版本
            buildConfigField "int", "VERSION_TYPE", VERSION_SIT
            buildConfigField "String", "VERSION_DESCRIPTION", "\"开发版本\""

            matchingFallbacks = ['debug']
        }

        uat {
            debuggable true
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 设置那个版本
            buildConfigField "int", "VERSION_TYPE", VERSION_UAT
            buildConfigField "String", "VERSION_DESCRIPTION", "\"UAT版本\""

            matchingFallbacks = ['release']
        }

        release {
            debuggable false
            minifyEnabled true

            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            // 设置那个版本
            buildConfigField "int", "VERSION_TYPE", VERSION_RELEASE
            buildConfigField "String", "VERSION_DESCRIPTION", "\"生产版本\""
        }
    }

    dexOptions {
        jumboMode true
    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
        // if true, only report errors
        ignoreWarnings true
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8.toString()
    }

    buildFeatures{
        dataBinding = true
    }

    dataBinding{
        enabled = true;
    }

    dexOptions {
        jumboMode true
    }

    compileOptions {
        targetCompatibility 1.8
        sourceCompatibility 1.8
    }
}

configurations.all {
    resolutionStrategy {
        force 'androidx.core:core-ktx:1.3.2'
        force 'androidx.core:core:1.6.0'
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.swiperefreshlayout:swiperefreshlayout:1.1.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

    api "cn.bingoogolapple:bga-banner:2.2.6@aar"
    api 'jp.wasabeef:richeditor-android:2.0.0'
    //富文本输入框
    api 'com.github.yuruiyin:RichEditor:0.2.4'
    api "com.yalantis:ucrop:1.5.0"
    //视频播放组件
    api 'com.google.android.exoplayer:exoplayer:2.18.1'
    api 'com.google.android.exoplayer:exoplayer-core:2.18.1'
    api 'com.google.android.exoplayer:exoplayer-ui:2.18.1'

    api project(":starlight-sdk-common")
}
